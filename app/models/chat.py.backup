from sqlalchemy import Column, Integer, String, DateTime, ForeignKey, Text, Boolean, Float, JSON
from sqlalchemy.sql import func
from sqlalchemy.orm import relationship
from app.core.database import Base

class Chat(Base):
    __tablename__ = "chats"

    # Primary key
    id = Column(Integer, primary_key=True, index=True)
    
    # Foreign keys
    user_id = Column(Integer, ForeignKey("users.id"), nullable=False, index=True)
    
    # Chat information
    title = Column(String(200), nullable=False)
    description = Column(Text, nullable=True)
    
    # Chat status and settings
    is_active = Column(Boolean, default=True)
    is_archived = Column(Boolean, default=False)
    
    # Chat metadata
    total_messages = Column(Integer, default=0)
    last_message_at = Column(DateTime(timezone=True), nullable=True)
    
    # Timestamps
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), onupdate=func.now())
    
    # Relationships
    user = relationship("User", back_populates="chats")
    messages = relationship("Message", back_populates="chat", cascade="all, delete-orphan")
    
    def __repr__(self):
        return f"<Chat(id={self.id}, title='{self.title}', user_id={self.user_id})>"


class Message(Base):
    __tablename__ = "messages"

    # Primary key
    id = Column(Integer, primary_key=True, index=True)
    
    # Foreign keys
    chat_id = Column(Integer, ForeignKey("chats.id"), nullable=False, index=True)
    
    # Message content
    content = Column(Text, nullable=False)
    is_from_user = Column(Boolean, nullable=False, index=True)
    
    # Message type and metadata (RENAMED from 'metadata' to avoid SQLAlchemy conflict)
    message_type = Column(String(20), default="text")  # text, image, voice, system
    message_message_metadata = Column(JSON, nullable=True)  # Changed from 'metadata' to 'message_metadata'
    
    # Message processing
    tokens_used = Column(Integer, nullable=True)
    processing_time = Column(Float, nullable=True)  # in seconds
    
    # Emotion and sentiment (for AI analysis)
    sentiment_score = Column(Float, nullable=True)  # -1 to 1
    emotion_detected = Column(String(50), nullable=True)
    confidence_score = Column(Float, nullable=True)
    
    # Message status
    is_edited = Column(Boolean, default=False)
    is_deleted = Column(Boolean, default=False)
    
    # Timestamps
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), onupdate=func.now())
    
    # Relationships
    chat = relationship("Chat", back_populates="messages")
    
    def __repr__(self):
        return f"<Message(id={self.id}, chat_id={self.chat_id}, is_from_user={self.is_from_user})>"